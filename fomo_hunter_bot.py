# -*- coding: utf-8 -*-
import os
import requests
import time
import schedule
import logging
from telegram import Bot
from datetime import datetime, timedelta, UTC

# --- ุงูุฅุนุฏุงุฏุงุช ุงูุฑุฆูุณูุฉ ---
# ุณูุชู ุฌูุจ ูุฐู ุงููุชุบูุฑุงุช ูู ููุตุฉ ุงููุดุฑ
TELEGRAM_BOT_TOKEN = os.environ.get('TELEGRAM_BOT_TOKEN', 'YOUR_TELEGRAM_BOT_TOKEN') 
TELEGRAM_CHAT_ID = os.environ.get('TELEGRAM_CHAT_ID', 'YOUR_TELEGRAM_CHAT_ID')

# --- ูุนุงููุฑ ุงูุชุญููู (ููููู ุชุนุฏูู ูุฐู ุงูููู ูุชูุงุณุจ ุงุณุชุฑุงุชูุฌูุชู) ---
VOLUME_SPIKE_MULTIPLIER = 10  # ุญุฌู ุงูุชุฏุงูู ุงูุญุงูู ูุฌุจ ุฃู ูููู 10 ุฃุถุนุงู ุงููุชูุณุท (ูุนูู 1000%)
PRICE_ACTION_CANDLES = 6      # ุนุฏุฏ ุงูุดููุน ุงูุชู ุณูุชู ุชุญููููุง (ุนูู ุฅุทุงุฑ ุณุงุนุฉ)
GREEN_CANDLE_THRESHOLD = 4    # ุงูุญุฏ ุงูุฃุฏูู ูุนุฏุฏ ุงูุดููุน ุงูุฎุถุฑุงุก ูู ุฅุฌูุงูู ุงูุดููุน ุงููุญููุฉ
MIN_USDT_VOLUME = 500000      # ุชุฌุงูู ุงูุนููุงุช ุฐุงุช ุญุฌู ุชุฏุงูู ุฃูู ูู 500 ุฃูู ุฏููุงุฑ ูุชุฌูุจ ุงูุนููุงุช ุงูููุชุฉ
RUN_EVERY_MINUTES = 15        # ุชุดุบูู ุงููุญุต ูู 15 ุฏูููุฉ

# --- ุฅุนุฏุงุฏุงุช ูุชูุฏูุฉ ---
MEXC_API_BASE_URL = "https://api.mexc.com"
COOLDOWN_PERIOD_HOURS = 2     # ูุชุฑุฉ ุงูุงูุชุธุงุฑ (ุจุงูุณุงุนุงุช) ูุจู ุฅุฑุณุงู ุชูุจูู ุฌุฏูุฏ ูููุณ ุงูุนููุฉ
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# --- ุชููุฆุฉ ุงูุจูุช ููุงุนุฏุฉ ุงูุจูุงูุงุช ุงููุคูุชุฉ ---
bot = Bot(token=TELEGRAM_BOT_TOKEN)
recently_alerted = {} # ูุชุฎุฒูู ุงูุนููุงุช ุงูุชู ุชู ุงูุชูุจูู ุนููุง ูุคุฎุฑุงู

def send_startup_message():
    """ูุฑุณู ุฑุณุงูุฉ ุชุฃููุฏูุฉ ุนูุฏ ุจุฏุก ุชุดุบูู ุงูุจูุช."""
    try:
        message = "โ **ุจูุช ุตูุงุฏ ุงููููู ูุชุตู ุงูุขู!**\n\nุณุฃููู ุจูุฑุงูุจุฉ ุงูุณูู ูุฅุฑุณุงู ุงูุชูุจููุงุช ุนูุฏ ุงูุนุซูุฑ ุนูู ูุฑุตุฉ ูุญุชููุฉ."
        bot.send_message(chat_id=TELEGRAM_CHAT_ID, text=message, parse_mode='Markdown')
        logging.info("ุชู ุฅุฑุณุงู ุฑุณุงูุฉ ุจุฏุก ุงูุชุดุบูู ุจูุฌุงุญ.")
    except Exception as e:
        logging.error(f"ูุดู ูู ุฅุฑุณุงู ุฑุณุงูุฉ ุจุฏุก ุงูุชุดุบูู. ูุฑุฌู ุงูุชุญูู ูู TELEGRAM_BOT_TOKEN ู TELEGRAM_CHAT_ID. ุงูุฎุทุฃ: {e}")

def get_usdt_pairs_from_mexc():
    """ุฌูุจ ุฌููุน ุฃุฒูุงุฌ ุงูุชุฏุงูู ุงูุชู ุชูุชูู ุจู USDT ูู ููุตุฉ MEXC."""
    try:
        url = f"{MEXC_API_BASE_URL}/api/v3/ticker/24hr"
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
        }
        response = requests.get(url, headers=headers, timeout=15)
        response.raise_for_status()
        data = response.json()
        
        if not isinstance(data, list) or not data:
            logging.warning("API Ticker 24hr ุงุณุชุฌุงุจุช ุจูุฌุงุญ ูููููุง ูู ุชุฑุฌุน ุฃู ุจูุงูุงุช ููุนููุงุช.")
            return []
            
        usdt_pairs = [
            s['symbol'] for s in data 
            if s['symbol'].endswith('USDT')
        ]
        logging.info(f"ุชู ุงูุนุซูุฑ ุนูู {len(usdt_pairs)} ุฒูุฌ ุชุฏุงูู ููุงุจู USDT ุนุจุฑ Ticker API.")
        return usdt_pairs
    except requests.exceptions.RequestException as e:
        logging.error(f"ุฎุทุฃ ูู ุฌูุจ ูุงุฆูุฉ ุงูุนููุงุช ูู MEXC ุนุจุฑ Ticker API: {e}")
        return []

def analyze_symbol(symbol):
    """
    ุชุญููู ุนููุฉ ูุงุญุฏุฉ ุจูุงุกู ุนูู ุงููุฌุงุฑ ุญุฌู ุงูุชุฏุงูู ูููุฉ ุงูุตุนูุฏ ุงูุณุนุฑู.
    (ุงููุณุฎุฉ ุงููุทูุฑุฉ ูุงูุฃูุซุฑ ูุฑููุฉ)
    """
    try:
        # --- ุงูุฎุทูุฉ 1: ุฌูุจ ุงูุจูุงูุงุช ุงููุงุฒูุฉ (ูุง ุชุบููุฑ ููุง) ---
        klines_url = f"{MEXC_API_BASE_URL}/api/v3/klines"
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
        }

        # ุฌูุจ ุญุฌู ุงูุชุฏุงูู ุงููููู ููููุงุฑูุฉ
        daily_params = {'symbol': symbol, 'interval': '1d', 'limit': 2}
        daily_res = requests.get(klines_url, params=daily_params, headers=headers, timeout=10)
        daily_res.raise_for_status()
        daily_data = daily_res.json()

        if len(daily_data) < 2: return None

        previous_day_volume = float(daily_data[0][7]) # ุญุฌู ุชุฏุงูู ุงูุฃูุณ ุจุงูู USDT
        current_day_volume = float(daily_data[1][7])  # ุญุฌู ุชุฏุงูู ุงูููู ุจุงูู USDT

        # --- ุงูุฎุทูุฉ 2: ุชุทุจูู ุงูุดุฑูุท ุงูุฌุฏูุฏุฉ ูุงููุญุณููุฉ ---

        # ุงูุดุฑุท ุงูุฃููู: ุชุฌุงูู ุงูุนููุงุช ุงูุถุนููุฉ (ูุง ุชุบููุฑ ููุง)
        if current_day_volume < MIN_USDT_VOLUME: return None

        # ุงูุดุฑุท ุงูุฃูู: ุงููุฌุงุฑ ุญุฌู ุงูุชุฏุงูู (ูุง ุชุบููุฑ ููุง)
        # (ููููู ุชุนุฏูู VOLUME_SPIKE_MULTIPLIER ูู ุงูุฅุนุฏุงุฏุงุช ูุฒูุงุฏุฉ ุฃู ุชูููู ุงูุญุณุงุณูุฉ)
        is_volume_spike = current_day_volume > (previous_day_volume * VOLUME_SPIKE_MULTIPLIER)
        if not is_volume_spike: return None

        # [ุงูุชุบููุฑ ุงูุฌููุฑู ููุง]
        # ุงูุดุฑุท ุงูุซุงูู ุงูุฌุฏูุฏ: ููุงุณ "ุณุฑุนุฉ ุงูุณุนุฑ" ุจุฏูุงู ูู ุนุฏ ุงูุดููุน ุงูุฎุถุฑุงุก
        # ุณูููู ุจุฌูุจ ุขุฎุฑ 4 ุดููุน ุณุงุนุฉ ูููุงุณ ุงูุตุนูุฏ ูู ุขุฎุฑ 4 ุณุงุนุงุช
        hourly_params = {'symbol': symbol, 'interval': '1h', 'limit': 4}
        hourly_res = requests.get(klines_url, params=hourly_params, headers=headers, timeout=10)
        hourly_res.raise_for_status()
        hourly_data = hourly_res.json()

        if len(hourly_data) < 4: return None

        # ุณุนุฑ ุงูุงูุชุชุงุญ ูุฃูู ุดูุนุฉ ูู ุงูุณูุณูุฉ (ููุฐ 4 ุณุงุนุงุช)
        initial_price = float(hourly_data[0][1])
        # ุฃุนูู ุณุนุฑ ุชู ุงููุตูู ุฅููู ูู ุงูุดูุนุฉ ุงูุฃุฎูุฑุฉ (ุงูุญุงููุฉ)
        latest_high_price = float(hourly_data[-1][2])
        
        # ุญุณุงุจ ูุณุจุฉ ุงูุตุนูุฏ
        if initial_price == 0: return None # ุชุฌูุจ ุงููุณูุฉ ุนูู ุตูุฑ
        price_increase_percent = ((latest_high_price - initial_price) / initial_price) * 100
        
        # ููููู ุชุนุฏูู ูุฐู ุงููุณุจุฉ ูู ุงูุฅุนุฏุงุฏุงุช. 30% ุชุนูู ุฃููุง ูุจุญุซ ุนู ุตุนูุฏ ููู ูููุงุฌุฆ.
        PRICE_VELOCITY_THRESHOLD = 30.0 
        is_strong_pump = price_increase_percent >= PRICE_VELOCITY_THRESHOLD
        
        if not is_strong_pump: return None

        # --- ุงูุฎุทูุฉ 3: ุฅุฐุง ุชุญููุช ูู ุงูุดุฑูุทุ ูู ุจุฅุนุฏุงุฏ ุจูุงูุงุช ุงูุชูุจูู ---
        ticker_url = f"{MEXC_API_BASE_URL}/api/v3/ticker/price"
        price_res = requests.get(ticker_url, params={'symbol': symbol}, headers=headers, timeout=10)
        price_res.raise_for_status()
        current_price = float(price_res.json()['price'])
        
        volume_increase_percent = ((current_day_volume - previous_day_volume) / previous_day_volume) * 100 if previous_day_volume > 0 else float('inf')

        return {
            'symbol': symbol,
            'volume_increase': f"+{volume_increase_percent:,.2f}%",
            'price_pattern': f"ุตุนูุฏ ุจูุณุจุฉ +{price_increase_percent:,.2f}% ูู ุขุฎุฑ 4 ุณุงุนุงุช",
            'current_price': f"{current_price:.8f}".rstrip('0').rstrip('.')
        }
        
    except requests.exceptions.RequestException:
        return None
    except Exception as e:
        logging.error(f"ุฎุทุฃ ุบูุฑ ูุชููุน ุนูุฏ ุชุญููู {symbol}: {e}")
        return None



def send_telegram_alert(alert_data):
    """ุฅุฑุณุงู ุฑุณุงูุฉ ุชูุจูู ุฅูู ุชููุฌุฑุงู."""
    message = f"""
๐จ *ุชูุจูู ูููู ูุญุชูู!* ๐จ

*ุงูุนููุฉ:* `${alert_data['symbol']}`
*ููุตุฉ:* `MEXC`

๐ *ุฒูุงุฏุฉ ุญุฌู ุงูุชุฏุงูู (24 ุณุงุนุฉ):* `{alert_data['volume_increase']}`
๐ฏ๏ธ *ููุท ุงูุณุนุฑ:* `{alert_data['price_pattern']}`
๐ฐ *ุงูุณุนุฑ ุงูุญุงูู:* `{alert_data['current_price']}` USDT

*(ุชุญุฐูุฑ: ูุฐุง ุชูุจูู ุขูู. ูู ุจุฃุจุญุงุซู ุงูุฎุงุตุฉ ูุจู ุงุชุฎุงุฐ ุฃู ูุฑุงุฑ.)*
    """
    try:
        bot.send_message(chat_id=TELEGRAM_CHAT_ID, text=message, parse_mode='Markdown')
        logging.info(f"ุชู ุฅุฑุณุงู ุชูุจูู ุจูุฌุงุญ ููุนููุฉ: {alert_data['symbol']}")
    except Exception as e:
        logging.error(f"ูุดู ุฅุฑุณุงู ุฑุณุงูุฉ ุชููุฌุฑุงู: {e}")

def main_job():
    """ุงููุธููุฉ ุงูุฑุฆูุณูุฉ ุงูุชู ูุชู ุชุดุบูููุง ุจุดูู ุฏูุฑู."""
    logging.info("===== ุจุฏุก ุฌููุฉ ูุญุต ุฌุฏูุฏุฉ =====")
    
    now = datetime.now(UTC)
    for symbol, timestamp in list(recently_alerted.items()):
        if now - timestamp > timedelta(hours=COOLDOWN_PERIOD_HOURS):
            del recently_alerted[symbol]
            
    symbols_to_check = get_usdt_pairs_from_mexc()
    if not symbols_to_check:
        logging.warning("ูู ูุชู ุงูุนุซูุฑ ุนูู ุนููุงุช ูููุญุต. ุณูุชู ุฅุนุงุฏุฉ ุงููุญุงููุฉ ูุงุญูุงู.")
        return

    alert_count = 0
    for i, symbol in enumerate(symbols_to_check):
        if symbol in recently_alerted: continue
        if (i + 1) % 100 == 0: logging.info(f"ุชูุฏู ุงููุญุต: {i+1}/{len(symbols_to_check)}")

        alert_data = analyze_symbol(symbol)
        
        if alert_data:
            send_telegram_alert(alert_data)
            recently_alerted[symbol] = datetime.now(UTC)
            alert_count += 1
            time.sleep(1)
    
    logging.info(f"===== ุงูุชูุงุก ุฌููุฉ ุงููุญุต. ุชู ุงูุนุซูุฑ ุนูู {alert_count} ุชูุจูู ุฌุฏูุฏ. =====")

if __name__ == "__main__":
    logging.info("ุชู ุชุดุบูู ุจูุช 'ุตูุงุฏ ุงููููู'.")
    logging.info(f"ุณูุชู ุฅุฌุฑุงุก ุงููุญุต ูู {RUN_EVERY_MINUTES} ุฏูููุฉ.")
    
    if 'YOUR_TELEGRAM' in TELEGRAM_BOT_TOKEN or 'YOUR_TELEGRAM' in TELEGRAM_CHAT_ID:
        logging.error("ุฎุทุฃ ูุงุฏุญ: ูู ูุชู ุชุนููู ุชููู ุงูุชููุฌุฑุงู ุฃู ูุนุฑู ุงููุญุงุฏุซุฉ. ูุฑุฌู ุฅุถุงูุชูู ููุชุบูุฑุงุช ุจูุฆุฉ.")
    else:
        # **ุงูุฅุถุงูุฉ ุงูุฌุฏูุฏุฉ: ุฅุฑุณุงู ุฑุณุงูุฉ ุจุฏุก ุงูุชุดุบูู**
        send_startup_message()
        
        schedule.every(RUN_EVERY_MINUTES).minutes.do(main_job)
        while True:
            schedule.run_pending()
            time.sleep(1)

